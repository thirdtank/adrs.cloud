#!/usr/bin/env ruby
#
require "optparse"
require "pathname"
require "fileutils"
require "shellwords"

ENV["RACK_ENV"] = "test"
require_relative "brut_cli"

def parse_options
  options = {
    rebuild: :use_default,
    rebuild_after: :use_default,
    show_scaffold: false,
  }
  OptionParser.new do |parser|
    parser.banner = %{Usage: #{$0} [options] «command» [args]

Manage and run tests in the app

COMMANDS

    run   - runs non e2e tests (this is the default when no command given)
    e2e   - runs e2e tests
    audit - show a list of all files without a corresponding test file 

OPTIONS
}
    parser.on("--[no-]rebuild", "If set, the entire schema is rebuilt before tests run (default true for e2e, false otherwise)") do |value|
      options[:rebuild] = !!value
    end
    parser.on("--[no-]rebuild-after", "If set, the entire schema is rebuilt after tests run (default true for e2e, false otherwise)") do |value|
      options[:rebuild_after] = !!value
    end
    parser.on("--audit-type=[FILE_TYPE]", "If set, only audit files of this type" ) do |value|
      options[:audit_type] = value.to_sym
    end
    parser.on("--show-scaffold", "If set, shows a scaffold command to generate missing tests" ) do |value|
      options[:show_scaffold] = !!value
    end
  end.parse!
  options
end

options = parse_options

class Command
  def self.from_string(string, args:, options:)
    case string
    when "run"   then Run.new(args:, options:)
    when "e2e"   then RunE2E.new(args:, options:)
    when "audit" then Audit.new(args:,options:)
    else
      nil
    end
  end

  def initialize(args:, options:)
    @args    = args
    @options = options
  end

  class Run < Command

    def rspec_command
      [
        "bin/rspec",
        "-I", Brut.container.app_specs_dir,
        "-I", Brut.container.app_src_dir,
        "-I lib/", # not needed when Brut is gemified
        "--tag ~e2e",
        "-P \"**/*.spec.rb\"",
      ].join(" ")
    end

    def call
      if @options[:rebuild] == :use_default
        @options[:rebuild] = false
      end
      if @options[:rebuild_after] == :use_default
        @options[:rebuild_after] = false
      end
      if @options[:rebuild]
        log "Rebuilding test database schema"
        system! "bin/db rebuild --app-env=test > /tmp/build-test-schema.log"
      end
      if @args.empty?
        log "Running all tests"
        system! "#{rspec_command} #{Brut.container.app_specs_dir}/"
      else
        test_args = @args.map { |_|
          '"' + Shellwords.escape(_) + '"'
        }.join(" ")
        system! "#{rspec_command} #{test_args}"
      end
      if @options[:rebuild_after]
        log "Re-Rebuilding test database schema"
        system! "bin/db rebuild --app-env=test > tmp/rebuild-test-schema.log"
      end
      0
    rescue SystemExit => ex
      log ex.message
      1
    end
  end

  class RunE2E < Run
    def rspec_command
      [
        "bin/rspec",
        "-I", Brut.container.app_specs_dir,
        "-I", Brut.container.app_src_dir,
        "-I lib/", # not needed when Brut is gemified
        "--tag e2e",
        "-P \"**/*.spec.rb\"",
      ].join(" ")
    end
    def call
      if @options[:rebuild] == :use_default
        @options[:rebuild] = true
      end
      if @options[:rebuild_after] == :use_default
        @options[:rebuild_after] = true
      end
      super
    end
  end

  class Audit < Command
    def call
      app_files = Dir["#{Brut.container.app_src_dir}/**/*"].select { |file|
        if file.start_with?(Brut.container.app_specs_dir.to_s)
          false
        elsif Pathname(file).extname != ".rb"
          false
        else
          true
        end
      }
      audit = app_files.map { |file|
        pathname = Pathname(file)
        relative = pathname.relative_path_from(Brut.container.app_src_dir)
        test_file = Brut.container.app_src_dir / "specs" / relative.dirname / "#{relative.basename(relative.extname)}.spec.rb"
        hash = {
          source_file: pathname,
          test_file: test_file,
          test_expected: true,
        }
        if pathname.fnmatch?( (Brut.container.components_src_dir / "**").to_s )
          if pathname.basename.to_s == "app_component.rb"
            hash[:type] = :infrastructure
            hash[:test_expected] = false
          else
            hash[:type] = :component
          end
        elsif pathname.fnmatch?( (Brut.container.forms_src_dir / "**").to_s )
          if pathname.basename.to_s == "app_form.rb"
            hash[:type] = :infrastructure
          else
            hash[:type] = :form
          end
          hash[:test_expected] = false
        elsif pathname.fnmatch?( (Brut.container.handlers_src_dir / "**").to_s )
          if pathname.basename.to_s == "app_handler.rb"
            hash[:type] = :infrastructure
            hash[:test_expected] = false
          else
            hash[:type] = :handler
          end
        elsif pathname.fnmatch?( (Brut.container.pages_src_dir / "**").to_s )
          if pathname.basename.to_s == "app_page.rb"
            hash[:type] = :infrastructure
            hash[:test_expected] = false
          else
            hash[:type] = :page
          end
        elsif pathname.fnmatch?( (Brut.container.back_end_src_dir / "**").to_s )
          type = pathname.parent.basename.to_s
          if pathname.basename.to_s == "app_#{type}.rb" ||
             type == "back_end" ||
             type == "seed" ||
             pathname.basename.to_s == "app_data_model.rb"

            hash[:type] = :infrastructure
            hash[:test_expected] = false
          else
            hash[:type] = type.to_sym
          end
        else
          hash[:type] = :other
          hash[:test_expected] = false
        end
        hash
      }

      log "These files are missing tests:"
      log ""

      files_missing = []
      audit.each do |file_audit|
        if !file_audit[:test_file].exist?
          if @options[:audit_type].nil? || file_audit[:type] == @options[:audit_type]
            if file_audit[:test_expected]
              files_missing << file_audit[:source_file]
              puts "#{file_audit[:type].to_s.ljust(15)} - #{file_audit[:source_file]}"
            end
          end
        end
      end
      if files_missing.empty?
        log "All tests exists!"
      else
        if @options[:show_scaffold]
          files_missing_args = files_missing.map { |file|
            '             "' + Shellwords.escape(file.to_s) + '"'
          }.join(" \\\n")

          log "Run this command to generate empty tests:\n\nbin/scaffold test \\\n#{files_missing_args}"
        end
      end

      0
    end
  end
end

command_name = if ARGV[0].to_s.strip == ""
                 "run"
               else
                 ARGV[0].strip
               end

command = Command.from_string(command_name,args: ARGV[1..] || [],options:)
if !command
  command = Command.from_string("run",args: ARGV,options:)
end

exit command.call

