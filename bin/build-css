#!/usr/bin/env ruby

require_relative "brut_cli"
require "fileutils"
require "json"

css_bundle = Brut.container.css_bundle_output_dir / "styles.css"
css_bundle_source = Brut.container.front_end_src_dir / "css" / "index.css"
metafile = Brut.container.tmp_dir / "build-css-meta.json"
asset_metadata_file = Brut.container.asset_metadata_file

name_with_hash_regexp = /app\/public\/(?<path>.+)\/(?<name>.+)\-(?<hash>.+)\.css/

command = "npx esbuild --loader:.ttf=copy --loader:.otf=copy --metafile=#{metafile} --entry-names=[name]-[hash] --sourcemap --bundle #{css_bundle_source} --outfile=#{css_bundle}"
log "Building CSS bundle '#{css_bundle}' with '#{command}'"
system!(command)

if !File.exist?(metafile)
  log "'#{metafile}' was not generated - cannot continue"
  exit 1
end

log "Parsing metafile '#{metafile}'"
metafile_contents = JSON.parse(File.read(metafile))

metadata = metafile_contents["outputs"].keys.map { |key|
  match_data = key.match(name_with_hash_regexp)
  if match_data
    path = match_data[:path]
    name = match_data[:name]
    hash = match_data[:hash]

    [ "/#{path}/#{name}.css", "/#{path}/#{name}-#{hash}.css" ]
  else
    nil
  end
}.compact.to_h

log "Reading asset metadata file '#{asset_metadata_file}'"
asset_metadata = if File.exist?(asset_metadata_file)
                   JSON.parse(File.read(asset_metadata_file))
                 else
                   log "'#{asset_metadata_file}' does not exist - creating it"
                   { "asset_metadata" => {} }
                 end
asset_metadata["asset_metadata"][".css"] = metadata

log "Writing updated asset metadata file '#{asset_metadata_file}'"
File.open(asset_metadata_file,"w") do |file|
  file.puts asset_metadata.to_json
end
