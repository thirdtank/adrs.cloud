#!/usr/bin/env ruby

require_relative "bin_kit"
require "optparse"

def setup(update_gems:,update_node:)
  if update_gems
    log "Updating gems"
    system! "bundle update"
  else
    log "Installing gems"
    # Only do bundle install if the much-faster
    # bundle check indicates we need to
    system! "bundle check --no-color || bundle install --no-color --quiet"
  end

  # https://github.com/ddollar/foreman/wiki/Don't-Bundle-Foreman
  log "Installing foreman"
  system! "gem install foreman"

  if update_node
    log "Updating Node Modules"
    system! "npm --no-color --no-progress update"
  else
    log "Installing Node Modules"
    system! "npm --no-color --no-progress install"
  end

  log "Re-installing playwright/chromium if needed"
  system! "node_modules/.bin/playwright install chromium"

  log "Ensuring tmp dir exists"
  system! "mkdir -p tmp"

  dot_env = ROOT_DIR / ".env.development"
  if !File.exist?(dot_env)
    raise "Problem: '#{dot_env}' does not exist"
  end

  previous_comment = ""
  dot_env_need_local = {}
  File.read(dot_env).split(/\n/).each do |line|
    if line =~ /^#(.*)$/
      previous_comment << line
    elsif line =~ /^LOCAL:([^=]+)$/
      dot_env_need_local[$1] = previous_comment
      previous_comment = ""
    elsif line =~ /^([^=])+/
      previous_comment = ""
    end
  end
  dot_env_local = ROOT_DIR / ".env.development.local"
  log "Ensuring '#{dot_env_local}' exists"
  if !File.exist?(dot_env_local)
    log "Creating '#{dot_env_local}'"
    FileUtils.touch dot_env_local
  end
  local_contents = File.read(dot_env_local).split(/\n/).map { |line|
    if line =~ /^([^=]+)=(.*)$/
      var = $1
      val = $2
      if dot_env_need_local[var] && val.to_s != ""
        log "Value for '#{var}' is good"
        dot_env_need_local.delete(var)
      end
    end
    line
  }.compact

  dot_env_need_local.each do |var,comment|
    log "A value is needed locally for '#{var}'"
    log ""
    log comment
    log ""
    puts "Enter the value below and hit Return"
    value = gets
    local_contents << "#{var}=#{value}"
    log "Got it, thanks"
  end

  log "Updating '#{dot_env_local}'"
  File.open(dot_env_local,"w") do |file|
    local_contents.each do |line|
      file.puts line
    end
  end

  log "Checking that #{dot_env_local} is being ignored"
  gitignore = ROOT_DIR / ".gitignore"
  if File.exist?(gitignore)
    lines = File.read(gitignore).split(/\n/)
    if lines.include?("/#{dot_env_local.basename}")
      log "It's there!"
    else
      log "It's missing. Adding..."
      lines << ""
      lines << "# This contains actual secrets and should not be checked in"
      lines << "/#{dot_env_local.basename}"
      File.open(gitignore,"w") do |file|
        lines.each do |line|
          file.puts line
        end
      end
    end
  else
    log "No #{gitignore}, so make sure you DO NOT CHECK #{dot_env_local} IN!!!"
  end

  log "Setting up databases"

  log "Re-creating dev database"
  system! "bin/db rebuild --env=development"

  log "Re-creating test database"
  system! "bin/db rebuild --env=test"

  log "Seeding dev database"
  system! "bin/db seed --env=development"


  log "Checking that you are set up with Heroku"

  log "All set up."
  help
end

def help
  log "Useful commands:"
  log ""
  log "  bin/run"
  log "     # run app locally"
  log ""
  log "  bin/ci"
  log "     # runs all tests and checks as CI would"
  log ""
  log "  bin/setup help"
  log "     # show this help"
  log ""
end

options = {
  update_gems: false,
  update_node: false,
}
OptionParser.new do |opts|
  opts.on("--update[=TYPE]","Update gems or modules to get the latest versions consistent with Gemfile or package.json. TYPE can be 'all', 'gems', or 'node'. If omitted, 'all' is assumed") do |value|
    options[:update_gems] = value.nil? || value == "gems"
    options[:update_node] = value.nil? || value == "node"
  end
end.parse!

if ARGV[0] == "help"
  help
else
  setup(**options)
end
