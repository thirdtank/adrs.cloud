# Building A Ruby Web Framework - Why Not?

Ruby has a lot of web frameworks, but everyone always chooses Rails. What if we started over, used the full power of Ruby, threw out old assumptions, took the best of all those frameworks and didn't just copy Rails?  What if we used object-orientation? What if we relied on web standards and  the browser's API?  What would such a web framework look like? And how hard would it be to make one for real?

We'll learn what you REALLY need to make a web framework. Yes, you're gonna need to render HTML, but do you really need to format and send emails?  You'll probably need a SQL database, but maybe cloud uploads can be handled another way.  But, you are gonna need testing, security, observability, and a lot more stuff.  The browser now supports lots of validated inputs, along with custom elements. What if your web framework treated those as first class citizens?  Plus, Ruby has lots of cool stuff like pattern matching we could use, too! Let's make a web frameworkâ€¦or at least learn what's really involved.

## To the organizers

Here's the general outline:

* Why even do this - Rails is great, right? It's old, though, and has baggage. It's also pretty darn big and isn't very OO. Plus,
  the standard library has a lot of cool stuff. Might be fun to do something different!
* What are the "table stakes" features? - Routing, rendering HTML, managing assets, some sort of database stuff.
* What can we skip? - Mailers, Rich Text, Cloud Uploads, Background Jobs
* There's a very long tail of complexity - testing, security, performance, observability, i18n, dev tools, deployment!
* How to try your hand at it without using Rails - Sinatra, Sequel, and the Ruby Standard Lib
* Cool stuff we could do in the year 2024 with no baggage - HTML5, pattern matching, Web Components, CSS variables, and more
* In conclusion - why NOT try it?

This will show real code along the way with the goal of making attendees feel empowered by Ruby by itself.

# Bio

David Copeland first wrote Ruby professionally 13 years ago at Living Social.  Since then, he's used Ruby and Rails as Chief Software Architect at Stitch Fix, CTO at Mood Health, and in countless side projects. He's the author of "Sustainable Web Development with Ruby on Rails", and was co-author of Agile Web Development with Ruby on Rails.  He also write Build Awesome Command Line Apps with Ruby, which is sadly out of print.
