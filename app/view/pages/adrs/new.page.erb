<header>
  <h1 class="tc ma-0 mt-3 ttu tracked-tight f-7">ADRpg</h1>
  <h2 class="tc mt-0 f-5 fw-5">Draft New ADR</h2>
</header>
<section class="pa-3">
  <% if errors? %>
    <aside class="pa-2 br-3 ba bc-red-500 bg-red-800 red-300"><%= errors %></aside>
  <% end %>
  <%= component Components::Adrs::Form.new(adr, "Save Draft") %>
</section>
<script>
const VALIDITY_STATE_ATTRIBUTES = {
  badInput: "Wrong type of data",
  customError: "custom error",
  patternMismatch: "Isn't in the right format",
  rangeOverflow: "Is too big",
  rangeUnderflow: "Is too small",
  stepMismatch: "Is not a valid value in the range",
  tooLong: "Is too long",
  tooShort: "Is too short",
  typeMismatch: "Is of the wrong type",
  valueMissing: "Is required",
}
const updateValidity = (element) => {
  if (element.validity.valid) {
    return
  }
  const errorLabel = element.parentNode.querySelector("[data-constraint-violation-messages]")
  if (!errorLabel) {
    console.warn("No error label!??!?!")
    return
  }
  const errors = Object.keys(VALIDITY_STATE_ATTRIBUTES).filter( (attribute) => element.validity[attribute] )
  errorLabel.textContent = errors.map( (key) => VALIDITY_STATE_ATTRIBUTES[key] ).join(", ")
}
document.querySelectorAll("form").forEach( (form) => {
  Array.from(form.elements).forEach( (formElement) => {
    formElement.addEventListener("invalid", (event) =>{
      form.dataset["submitted"] = true
      updateValidity(event.target)
    })
    formElement.addEventListener("input", (event) => updateValidity(event.target) )
  })
})
</script>
