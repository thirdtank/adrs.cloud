<template id="test">
  <li>
    <details>
      <summary style="display: flex; gap: 0.25rem; align-items: center;">
        <span style="width: 5%;" data-not-run>‚ùì</span>
        <span style="width: 5%;" data-passed>‚úÖ</span>
        <span style="width: 5%;" data-failed>‚ùå</span>
        <span style="width: 5%;" data-error>üí£</span>
        <span style="width: 5%;" data-running>üîÑ</span>
        <h2 style="width: 40%; font-size: 1rem;"></h2>
        <button>Run Test</button>
      </summary>
      <pre style="background-color: #dfdfdf; border: solid thin black; padding: 0.5rem; border-radius: 0.5rem; font-size: 0.75rem; overflow-x: scroll"></pre>
    </details>
  </li>
</template>
<section style="width: 66%; margin-left: auto; margin-right: auto">
<h1>End to End Tests</h1>
<ul data-e2etests>
</ul>
</section>
<script>
  const pad = (string,length) => {
    if (string.length >= length) {
      return string
    }
    else {
      return pad(`${string} `,length)
    }
  }
  const dateFormat = Intl.DateTimeFormat(
    undefined,
    {
      year: "numeric",
      month: "numeric",
      day: "numeric",
      hour: "numeric",
      minute: "numeric",
      second: "numeric",
    }
  )
  document.addEventListener("DOMContentLoaded", () => {

    window.localStorage.removeItem("current-test")
    window.localStorage.removeItem("current-test-step")
    window.localStorage.removeItem("current-test-context")

    const ul = document.querySelector("[data-e2etests]")
    const template = document.getElementById("test")

    for (const [ name,klass ] of Object.entries(e2eTests)) {
      const li = template.content.children[0].cloneNode(true)

      const notRun  = li.querySelector("[data-not-run]")
      const failed  = li.querySelector("[data-failed]")
      const passed  = li.querySelector("[data-passed]")
      const running = li.querySelector("[data-running]")
      const error   = li.querySelector("[data-error]")

      notRun.style.display  = "block"
      failed.style.display  = "none"
      passed.style.display  = "none"
      running.style.display = "none"
      error.style.display   = "none"

      const name = li.querySelector("h2")
      name.textContent = klass.name

      const button = li.querySelector("button")

      const log = li.querySelector("pre")
      button.addEventListener("click", (event) => {
        event.preventDefault()
        const now = Date.now()

        notRun.style.display  = "none"
        failed.style.display  = "none"
        passed.style.display  = "none"
        running.style.display = "block"
        error.style.display   = "none"

        window.localStorage.setItem("current-test",klass.name)
        window.localStorage.setItem("current-test-step","0")
        window.localStorage.setItem("log","")
        window.localStorage.removeItem("current-test-context")
        window.open("/","_blank")
        const channel = new BroadcastChannel(`test:${klass.name}`)
        channel.addEventListener("message", (event) => {
          const data = event.data
          let message
          if (data.type == "passed") {
            message = "PASSED"

            notRun.style.display  = "none"
            failed.style.display  = "none"
            passed.style.display  = "block"
            running.style.display = "none"
            error.style.display   = "none"

          }
          else if (data.type == "failed") {
            message = data.message

            if (data.context) {
              message = message + `; Context: ${data.context}`
            }
            if (data.errorClass) {
              message = message + `; Error Class: ${data.errorClass}`
            }

            notRun.style.display  = "none"
            failed.style.display  = "block"
            passed.style.display  = "none"
            running.style.display = "none"
            error.style.display   = "none"

          }
          else if (data.type == "error") {
            message = `Message: ${data.message}`
            if (data.context) {
              message = message + `; Context: ${data.context}`
            }
            if (data.errorClass) {
              message = message + `; Error Class: ${data.errorClass}`
            }

            notRun.style.display  = "none"
            failed.style.display  = "none"
            passed.style.display  = "none"
            running.style.display = "none"
            error.style.display   = "block"
          }
          else if (data.type == "log") {
            message = data.message
          }
          const elapsed = Date.now() - now
          const fullMessage = `${pad(dateFormat.format(new Date()),20)} ( ${pad(String(elapsed),5)} ) [${pad(data.type,10)}]: ${message}`
          log.textContent = log.textContent + `\n${ fullMessage }`

        })
      })
      ul.appendChild(li)
    }
    window.localStorage.removeItem("current-test")
    window.localStorage.removeItem("current-test-step")
    window.localStorage.removeItem("current-test-context")
  })
</script>
