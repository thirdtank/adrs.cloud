@import "melange-css/melange.css";
@import "textarea.css";
@import "button.css";

:root {
  --mg-ff-cursive: 'Segoe Print', 'Bradley Hand', Chilanka, casual, cursive;
}

.w-quarter {
  width: 25%;
}

.text-glow {
  text-shadow: currentColor 0px 0px 8px;
}
@media (prefers-contrast: more) {
  .text-glow {
    text-shadow: none;
  }
}

::backdrop {
  background-color: black;
  opacity: 0.5;
}

.rendered-markdown p {
  line-height: var(--mg-lh-copy);
  max-width: var(--mg-tw-wide);
}
.bg-red-600-a20 {
  background-color: rgb(from var(--mg-red-600) r g b / 20%);
}

.rotating {
  animation: rotation 2s linear infinite;
}

@keyframes rotation {
  100% {
    transform: rotate(360deg);
  }
}
/* Text fields */

.text-field {
  /* Text fields appear sunken into the page */
  box-shadow: inset 0 0 calc(1.25 * var(--mg-sp-1)) calc(0.25 * var(--mg-sp-1)) var(--mg-gray-400);
  border-style: solid;
  border-width: thin;
  border-color: var(--mg-gray-400);
  border-radius: var(--mg-bw-2);
  font-size: var(--mg-fs-3);
  padding: var(--mg-sp-3);
  background-color: white;
}

.text-field::placeholder {
  /** Placeholder text should be obviously different, so make it smaller size */
  font-size: var(--mg-fs-2);
  font-weight: 300;
}

.text-field:hover {
  /* Subtle purple on hover */
  border-color: var(--mg-purple-600);
}

.text-field:focus {
  /* More obvious purple on focus */
  outline-color: var(--mg-purple-600);
  outline-style: solid;
  outline-width: 2px;
  box-shadow: inset 0 0 calc(1.25 * var(--mg-sp-1)) calc(0.25 * var(--mg-sp-1)) var(--mg-gray-300);
}

.text-field-label {
  /** Label needs to be closer to the field, but not too close.
      This should split it properly, but still fit into the grid */
  padding-top: calc(0.25 * var(--mg-sp-2));
  padding-bottom: calc(1.75 * var(--mg-sp-2));
  font-weight: 300;
  font-size: var(--mg-fs-2);
}

.text-field-error-label {
  display: none;
}
/* data-invalid is generated by the server, so that can be used
 * to reliably know that the field in invalid.
 *
 * The :invalid pseudoclass, however, is set no matter what, so
 * that is further qualifgied with the data-submitted attribute that
 * will be set by the form
 */
input[data-invalid] ~ .text-field-label,
form[data-submitted] input:invalid ~ .text-field-label,
.textarea-container[data-invalid] ~ .text-field-label,
textarea[data-invalid] ~ .text-field-label,
form[data-submitted] textarea:invalid ~ .text-field-label {
  display:none;
}

input[data-invalid] ~ .text-field-error-label,
form[data-submitted] input:invalid ~ .text-field-error-label,
textarea[data-invalid] ~ .text-field-error-label,
.textarea-container[data-invalid] ~ .text-field-error-label,
form[data-submitted] textarea:invalid ~ .text-field-error-label {
  color: var(--mg-red-300);
  background-color: var(--mg-red-700);
  border-top-right-radius: 999px;
  border-bottom-right-radius: 999px;
  align-items: center;
  font-weight: 500;
  font-size: var(--mg-fs-2);
  padding: var(--mg-sp-2);
  display: flex;
}

brut-ajax-submit[requesting] button,
brut-ajax-submit[submitted] button {
  animation-duration: 125ms;
  animation-name: fade-out;
  animation-fill-mode: forwards;
  animation-timing-function: ease-out;
}

brut-ajax-submit [data-loading-animation],
brut-ajax-submit [data-submitted-icon] {
  animation-duration: 125ms;
  animation-name: fade-out;
  animation-fill-mode: forwards;
  animation-timing-function: ease-out;
}
brut-ajax-submit[requesting] [data-loading-animation] {
  animation-composition: accumulate;
  animation-duration: 125ms;
  animation-name: fade-in;
  animation-fill-mode: forwards;
  animation-timing-function: ease-in;
}
brut-ajax-submit[submitted] [data-submitted-icon] {
  animation-duration: 125ms;
  animation-name: fade-in;
  animation-fill-mode: forwards;
  animation-timing-function: ease-in;
}

@keyframes fade-out {
  100% {
    opacity: 0;
    visibility: hidden;
  }
}
@keyframes fade-in {
  100% {
    opacity: 100%;
    visibility: visible;
  }
}

brut-constraint-violation-message ~ brut-constraint-violation-message::before {
  content: ", ";
}
