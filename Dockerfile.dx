FROM ruby:3.4

SHELL [ "/bin/bash", "-o", "pipefail", "-c" ]

ENV DEBIAN_FRONTEND=noninteractive

# These packages are needed to set up other repos to install other
# packages and/or are useful in installing other software
#
# - ca-certificates  - needed by Postgres client
# - curl             - needed by various installation instructions
# - gnupg            - needed to install Docker
# - lsb-release      - needed by Postgres install instructions
# - rsync            - needed by Brut's build_assets command
# - vim              - needed when we want to edit files inside container
RUN apt-get -y clean && \
    apt-get -y update && \
    apt-get install --quiet --yes \
      ca-certificates \
      curl \
      gnupg \
      lsb-release \
      rsync \
      vim

# These are dependencies needed to install Chromium via Playright. You can check this list via
#
#     npx playwright install-deps --dry-run chromium
#
RUN apt-get install -y --no-install-recommends libasound2 \
                                               libatk-bridge2.0-0 \
                                               libatk1.0-0 \
                                               libatspi2.0-0 \
                                               libcairo2 \
                                               libcups2 \
                                               libdbus-1-3 \
                                               libdrm2 \
                                               libgbm1 \
                                               libglib2.0-0 \
                                               libnspr4 \
                                               libnss3 \
                                               libpango-1.0-0 \
                                               libx11-6 \
                                               libxcb1 \
                                               libxcomposite1 \
                                               libxdamage1 \
                                               libxext6 \
                                               libxfixes3 \
                                               libxkbcommon0 \
                                               libxrandr2 \
                                               xvfb \
                                               fonts-noto-color-emoji \
                                               fonts-unifont \
                                               libfontconfig1 \
                                               libfreetype6 \
                                               xfonts-scalable \
                                               fonts-liberation \
                                               fonts-ipafont-gothic \
                                               fonts-wqy-zenhei \
                                               fonts-tlwg-loma-otf \
                                               fonts-freefont-ttf


# Install Docker itself. Note that this is installed only what is needed to run
# the Docker CLI - the docker-compose.dx.yml will connect this docker's socket
# to the one on the host. This is only to run stuff like docker build and docker push.
# It's NOT intended to run docker containers inside this one.
RUN install -m 0755 -d /etc/apt/keyrings && \
    curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
    chmod a+r /etc/apt/keyrings/docker.gpg  && \
    echo \
      "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
      "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
      tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update --quiet --yes && \
    apt-get install --quiet --yes docker-ce \
                       docker-ce-cli \
                       containerd.io \
                       docker-buildx-plugin \
                       docker-compose-plugin


# Install Postgres Client, per https://www.postgresql.org/download/linux/debian/
# Note that ca-certificates and curl are installed above
RUN sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list' && \
    wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - && \
    apt-get update && \
    apt-get -y install postgresql-client-16

# Update RubyGems and Bundler
RUN echo "gem: --no-document" >> ~/.gemrc && \
    gem update --system && \
    gem install bundler

# Per Heroku docs at 
# https://devcenter.heroku.com/articles/heroku-cli#install-with-ubuntu-debian-apt-get
# Hopefully this works
RUN curl https://cli-assets.heroku.com/install-ubuntu.sh | sh

# Setup a non-root user

# Their user id, which ideally matches their user id on the host
ARG user_uid=10001
# Their group id, which ideally matches their group id on the host
ARG user_gid=10002
# The group id that can access /var/run/docker.sock on the host.
# If this isn't mapped properly, no docker-out-of-docker commands will work
ARG docker_gid=10003
# Can be set to ',0' in order to add the user to roo's group
ARG sadly_user_must_be_added_to_root=

# Create the user's group ID if it does not exist
RUN getent group ${user_gid} || groupadd --gid ${user_gid} appgroup
# Create the docker group id if it does not exist
RUN getent group ${docker_gid} || groupadd --gid ${docker_gid} hostdocker
# Create the user. Note that we put bash_customizations in both .profile and .bashrc
# to increase the chances they are used when running bash in various configurations
RUN useradd --uid ${user_uid} --gid ${user_gid} --groups ${sadly_user_must_be_added_to_root}${docker_gid} --create-home --home-dir /home/appuser appuser && \
    echo ". ~/.bash_customizations" >> /home/appuser/.profile && \
    echo ". ~/.bash_customizations.local" >> /home/appuser/.profile && \
    echo ". ~/.bash_customizations" >> /home/appuser/.bashrc && \
    echo ". ~/.bash_customizations.local" >> /home/appuser/.bashrc

COPY --chown=appuser:${user_gid} dx/show-help-in-app-container-then-wait.sh /home/appuser
COPY --chown=appuser:${user_gid} dx/bash_customizations /home/appuser/.bash_customizations
COPY --chown=appuser:${user_gid} dx/bash_customizations.local /home/appuser/.bash_customizations.local

# NOT including the group here as that will place the user's environment
# ONLY in that group and not in all the groups in which they are a part.
USER appuser

# Install NodeJS, per https://nodejs.org/en/download
RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash && \
    \. "$HOME/.nvm/nvm.sh" && \
    nvm install 22 && \
    node -v && nvm current && npm -v



# Install the version of playwright that matches Gemfile.lock
ARG PLAYWRIGHT_VERSION
RUN \. "$HOME/.nvm/nvm.sh" && \
    nvm use default && \
    npm install -g playwright@$PLAYWRIGHT_VERSION && \
    npx playwright install chromium
